constructor(
    private fb: FormBuilder,
    private modalService: NgbModal,
    public serviceGroupService: ServiceGroupService
  ) {
    this.loadMaxStorageDays();
  }

  private loadMaxStorageDays() {
    const sb = this.serviceGroupService
      .getMaxStorageDays()
      .subscribe(res => {
        this.maxStorageDays = res.map(i => i.maxDayStorage);
      });

    this.subscriptions.push(sb);
  }

  // angular lifecircle hooks
  ngOnInit(): void {
    this.filterForm();
    this.searchForm();
    this.serviceGroupService.fetch();
    this.grouping = this.serviceGroupService.grouping;
    this.paginator = this.serviceGroupService.paginator;
    this.sorting = this.serviceGroupService.sorting;
    const sb = this.serviceGroupService.isLoading$.subscribe(res => this.isLoading = res);
    this.subscriptions.push(sb);
  }

  ngOnDestroy() {
    this.subscriptions.forEach((sb) => sb.unsubscribe());
  }

  getClServiceOptionDtosString(clServiceOptionDtos) {
    let res = '';
    clServiceOptionDtos.forEach(i => {
      res += ${i.resolution} : ${formatNumber(i.price, 'de-DE', '1.0-0')} \x0A;
    });
    return res;
  }

  // filtration
  filterForm() {
    this.filterGroup = this.fb.group({
      maxDayStorage: [''],
      active: [''],
      searchTerm: [''],
    });

    this.subscriptions.push(
      this.filterGroup.controls.maxDayStorage.valueChanges.subscribe(() => this.filter())
    );

    this.subscriptions.push(
      this.filterGroup.controls.active.valueChanges.subscribe(() =>
        this.filter()
      )
    );

  }

  filter() {
    const filter = {};
    const maxDayStorage = this.filterGroup.get('maxDayStorage').value;
    if (maxDayStorage) {
      filter['maxDayStorage'] = maxDayStorage;
    }

    const active = this.filterGroup.get('active').value;
    if (active) {
      filter['active'] = active;
    }
    this.serviceGroupService.patchState({ filter });
  }

  // search
  searchForm() {
    this.searchGroup = this.fb.group({
      searchTerm: [''],
    });
    const searchEvent = this.searchGroup.controls.searchTerm.valueChanges
      .pipe(
        debounceTime(150),
        distinctUntilChanged()
      )
      .subscribe((val) => this.search(val));

    this.subscriptions.push(searchEvent);
  }

  search(searchTerm: string) {
    this.serviceGroupService.patchState({ searchTerm });
  }

  // sorting
  sort(column: string) {
    const sorting = this.sorting;
    const isActiveColumn = sorting.column === column;
    if (!isActiveColumn) {
      sorting.column = column;
      sorting.direction = 'asc';
    } else {
      sorting.direction = sorting.direction === 'asc' ? 'desc' : 'asc';
    }
    this.serviceGroupService.patchState({ sorting });
  }

  // pagination
  paginate(paginator: PaginatorState) {
    this.serviceGroupService.patchState({ paginator });
  }

  // form actions
  create() {
    this.edit(undefined);
  }

  edit(id: string, $event = null) {
    const modalRef = this.modalService.open(EditServiceGroupModalComponent, { size: 'xl' });
    modalRef.componentInstance.id = id;
    modalRef.result.then(
      () => {
        this.serviceGroupService.fetch();
        this.loadMaxStorageDays();

      },
      () => { }
    );
    this.subscriptions.push(modalRef.hidden.subscribe(() => $event.target.blur()));
  }

  delete(serviceGroup: ServiceGroup) {
    const modalRef = this.modalService.open(DeleteServiceGroupModalComponent);
    modalRef.componentInstance.serviceGroup = serviceGroup;
    modalRef.result.then(
      () => {
        this.serviceGroupService.fetch();
        this.loadMaxStorageDays();
      },
      () => { }
    );
  }
}
